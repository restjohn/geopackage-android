{"name":"Geopackage Android","tagline":"GeoPackage Android Lib","body":"# GeoPackage Android\r\n\r\n### GeoPackage Android Lib ####\r\n\r\nThe GeoPackage Libraries were developed at the National Geospatial-Intelligence Agency (NGA) in collaboration with [BIT Systems](https://www.bit-sys.com/index.jsp). The government has \"unlimited rights\" and is releasing this software to increase the impact of government investments by providing developers with the opportunity to take things in new directions. The software use, modification, and distribution rights are stipulated within the [MIT license](http://choosealicense.com/licenses/mit/).\r\n\r\n### Pull Requests ###\r\nIf you'd like to contribute to this project, please make a pull request. We'll review the pull request and discuss the changes. All pull request contributions to this project will be released under the MIT license.\r\n\r\nSoftware source code previously released under an open source license and then modified by NGA staff is considered a \"joint work\" (see 17 USC ยง 101); it is partially copyrighted, partially public domain, and as a whole is protected by the copyrights of the non-government authors and must be released according to the terms of the original open source license.\r\n\r\n### About ###\r\n\r\nGeoPackage Android is a SDK implementation of the Open Geospatial Consortium [GeoPackage](http://www.geopackage.org/) [spec](http://www.geopackage.org/spec/).  It is listed as an [OGC GeoPackage Implementation](http://www.geopackage.org/#implementations) by the National Geospatial-Intelligence Agency.\r\n\r\nThe GeoPackage SDK provides the ability to manage GeoPackage files providing read, write, import, export, share, and open support. Open GeoPackage files provide read and write access to features and tiles. Feature support includes Well-Known Binary and Google Map shape translations. Tile generation supports creation by URL or features. Tile providers supporting GeoPackage format, Google tile API, and feature tile generation.\r\n\r\n### Usage ###\r\n\r\n#### GeoPackage MapCache ####\r\n\r\nThe [GeoPackage MapCache](https://github.com/ngageoint/geopackage-mapcache-android) app provides an extensive standalone example on how to use the SDK.\r\n\r\n#### Example ####\r\n\r\n    // Context context = ...;\r\n    // File geoPackageFile = ...;\r\n    // GoogleMap map = ...;\r\n    \r\n    // Get a manager\r\n    GeoPackageManager manager = GeoPackageFactory.getManager(context);\r\n    \r\n    // Available databases\r\n    List<String> databases = manager.databases();\r\n    \r\n    // Import database\r\n    boolean imported = manager.importGeoPackage(geoPackageFile);\r\n    \r\n    // Open database\r\n    GeoPackage geoPackage = manager.open(databases.get(0));\r\n    \r\n    // GeoPackage Table DAOs\r\n    SpatialReferenceSystemDao srsDao = geoPackage.getSpatialReferenceSystemDao();\r\n    ContentsDao contentsDao = geoPackage.getContentsDao();\r\n    GeometryColumnsDao geomColumnsDao = geoPackage.getGeometryColumnsDao();\r\n    TileMatrixSetDao tileMatrixSetDao = geoPackage.getTileMatrixSetDao();\r\n    TileMatrixDao tileMatrixDao = geoPackage.getTileMatrixDao();\r\n    DataColumnsDao dataColumnsDao = geoPackage.getDataColumnsDao();\r\n    DataColumnConstraintsDao dataColumnConstraintsDao = geoPackage.getDataColumnConstraintsDao();\r\n    MetadataDao metadataDao = geoPackage.getMetadataDao();\r\n    MetadataReferenceDao metadataReferenceDao = geoPackage.getMetadataReferenceDao();\r\n    ExtensionsDao extensionsDao = geoPackage.getExtensionsDao();\r\n    \r\n    // Feature and tile tables\r\n    List<String> features = geoPackage.getFeatureTables();\r\n    List<String> tiles = geoPackage.getTileTables();\r\n    \r\n    // Query Features\r\n    String featureTable = features.get(0);\r\n    FeatureDao featureDao = geoPackage.getFeatureDao(featureTable);\r\n    GoogleMapShapeConverter converter = new GoogleMapShapeConverter(\r\n            featureDao.getProjection());\r\n    FeatureCursor featureCursor = featureDao.queryForAll();\r\n    try{\r\n        while(featureCursor.moveToNext()){\r\n            FeatureRow featureRow = featureCursor.getRow();\r\n            GeoPackageGeometryData geometryData = featureRow.getGeometry();\r\n            Geometry geometry = geometryData.getGeometry();\r\n            GoogleMapShape shape = converter.toShape(geometry);\r\n            GoogleMapShape mapShape = GoogleMapShapeConverter\r\n                    .addShapeToMap(map, shape);\r\n            // ...\r\n        }\r\n    }finally{\r\n        featureCursor.close();\r\n    }\r\n    \r\n    // Query Tiles\r\n    String tileTable = tiles.get(0);\r\n    TileDao tileDao = geoPackage.getTileDao(tileTable);\r\n    TileCursor tileCursor = tileDao.queryForAll();\r\n    try{\r\n        while(tileCursor.moveToNext()){\r\n            TileRow tileRow = tileCursor.getRow();\r\n            byte[] tileBytes = tileRow.getTileData();\r\n            Bitmap tileBitmap = tileRow.getTileDataBitmap();\r\n            // ...\r\n        }\r\n    }finally{\r\n        tileCursor.close();\r\n    }\r\n    \r\n    // Tile Provider (GeoPackage or Google API)\r\n    TileProvider overlay = GeoPackageOverlayFactory\r\n            .getTileProvider(tileDao);\r\n    TileOverlayOptions overlayOptions = new TileOverlayOptions();\r\n    overlayOptions.tileProvider(overlay);\r\n    overlayOptions.zIndex(-1);\r\n    map.addTileOverlay(overlayOptions);\r\n    \r\n    // Feature Tile Provider\r\n    FeatureTiles featureTiles = new FeatureTiles(context, featureDao);\r\n    TileProvider featureOverlay = new FeatureOverlay(featureTiles);\r\n    TileOverlayOptions featureOverlayOptions = new TileOverlayOptions();\r\n    featureOverlayOptions.tileProvider(featureOverlay);\r\n    featureOverlayOptions.zIndex(-1);\r\n    map.addTileOverlay(featureOverlayOptions);\r\n    \r\n    // URL Tile Generator\r\n    TileGenerator urlTileGenerator = new UrlTileGenerator(context, geoPackage,\r\n                    \"url_tile_table\", \"http://url/{z}/{x}/{y}.png\", 2, 7);\r\n    int urlTileCount = urlTileGenerator.generateTiles();\r\n    \r\n    // Feature Tile Generator\r\n    TileGenerator featureTileGenerator = new FeatureTileGenerator(context, geoPackage,\r\n                    featureTable + \"_tiles\", featureTiles, 10, 15);\r\n    int featureTileCount = featureTileGenerator.generateTiles();\r\n    \r\n    // Close database when done\r\n    geoPackage.close();\r\n\r\n### Installation ###\r\n\r\nPull from the [Maven Central Repository](http://search.maven.org/#artifactdetails|mil.nga.geopackage|geopackage-android|1.0.0|aar) (AAR, POM, Source, Javadoc)\r\n\r\n    compile \"mil.nga.geopackage:geopackage-android:1.0.0\"\r\n\r\n### Build ###\r\n\r\nBuild this repository using Android Studio and/or Gradle.\r\n\r\n#### Project Setup ####\r\n\r\nInclude as repositories in your project build.gradle:\r\n\r\n    repositories {\r\n        jcenter()\r\n        mavenLocal()\r\n    }\r\n\r\n##### Normal Build #####\r\n\r\nInclude the dependency in your module build.gradle with desired version number:\r\n\r\n    compile \"mil.nga.geopackage:geopackage-android:1.0.0\"\r\n    \r\nAs part of the build process, run the \"uploadArchives\" task on the geopackage-android Gradle script to update the Maven local repository.\r\n    \r\n##### Local Build #####\r\n\r\nReplace the normal build dependency in your module build.gradle with:\r\n\r\n    compile project(':geopackage-sdk')\r\n    \r\nInclude in your settings.gradle:\r\n\r\n    include ':geopackage-sdk'\r\n    \r\nFrom your project directory, link the cloned SDK directory:\r\n\r\n    ln -s ../geopackage-android/geopackage-sdk geopackage-sdk\r\n\r\n### Remote Dependencies ###\r\n\r\n* [GeoPackage Core Java](https://github.com/ngageoint/geopackage-core-java) (The MIT License (MIT)) - GeoPackage Library\r\n* [WKB](https://github.com/ngageoint/geopackage-wkb-java) (The MIT License (MIT)) - GeoPackage Well Known Binary Lib\r\n* [OrmLite](http://ormlite.com/) (Open Source License) - Object Relational Mapping (ORM) Library\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}